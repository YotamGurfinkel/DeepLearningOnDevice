# -*- coding: utf-8 -*-
"""convoultions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IpY8Op-qQZsmOeHale2s_ZkKjGFFAEVf
"""

import torch
import torchvision.datasets
import torchvision.transforms as transforms

cifar10_dataset = torchvision.datasets.CIFAR10(root='./data', download=True, train=True, transform=transforms.ToTensor())
cifar10_trainloader = torch.utils.data.DataLoader(cifar10_dataset, batch_size=32, shuffle=True)

first_batch_data, first_batch_labels= iter(cifar10_trainloader).next()

print('first_batch_data shape:', first_batch_data.shape)

# Count the number of parameters
def num_params(layer):
    return sum([p.numel() for p in layer.parameters()])

import torch.nn as nn

# First conv layer: works on input image volume
conv1 = nn.Conv2d(in_channels=first_batch_data.size(1), out_channels=10, padding=1, kernel_size=3, stride=1, bias=False)

print('conv1: {} parameters'.format(num_params(conv1)))

# First conv layer: works on input image volume
conv2 = nn.Conv2d(in_channels=first_batch_data.size(1), out_channels=10, padding=1, kernel_size=3, stride=1, bias=True)

print('conv2: {} parameters'.format(num_params(conv2)))

print('Before first conv layer:', first_batch_data.shape)
y1 = conv2(first_batch_data)
print('After first conv layer:',y1.shape)

conv3 = nn.Conv2d(in_channels=10, out_channels=20, padding=0, kernel_size=4, stride=2)
print('conv3: {} parameters'.format(num_params(conv3)))
print('Before second conv layer:',y1.shape)
y2 = conv3(y1)
print('After second conv layer:',y2.shape)

pooling_layer = nn.MaxPool2d(kernel_size=2, stride=2)

print('After second conv layer:',y2.shape)
print('After max pooling layer:',pooling_layer(y2).shape)

class LeNet(nn.Module):
    def __init__(self, in_channels):
        super().__init__()
        self.feature_extractor = nn.Sequential(
            nn.Conv2d(in_channels, out_channels=6, kernel_size=5),
            nn.ReLU(),
            nn.MaxPool2d(2),
            nn.Conv2d(in_channels=6, out_channels=16, kernel_size=5),
            nn.ReLU(),
            nn.MaxPool2d(2),
        )
        self.classifier = nn.Sequential(
            nn.Flatten(),
            nn.Linear(16*5*5, 120),  
            nn.ReLU(),
            nn.Linear(120, 84),
            nn.ReLU(),
            nn.Linear(84, 10)
        )
    def forward(self, x):
        features = self.feature_extractor(x)
        class_scores = self.classifier(features)
        return class_scores

net = LeNet(3)
print(net)

print('first_batch_data shape=', first_batch_data.shape)
print('LeNet(first_batch_data) shape=', net(first_batch_data).shape)